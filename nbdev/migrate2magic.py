# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/09_migrate2magic.ipynb (unless otherwise specified).

__all__ = ['nbdev_migrate2magic']

# Cell
from .imports import *
from .export import read_nb
from fastscript import call_parse,Param
import re,nbformat

# Internal Cell
def _code_patterns_and_replace_fns():
    "return a list of pattern/function tuples that can migrate flags used in code cells"
    patterns_and_replace_fns = []

    def _replace_fn(magic, m):
        "return a magic flag for a comment flag matched in `m`"
        return f'%{magic}' if m.group(1) is None else f'%{magic} {m.group(1).strip()}'

    def _add_pattern_and_replace_fn(comment_flag, magic_flag):
        "add a pattern/function tuple to go from comment to magic flag"
        pattern = re.compile(rf"""
# Matches a comment flag line (e.g. #exporti) and catches parameter in group 1:
^              # beginning of line (since re.MULTILINE is passed)
\s*            # any number of whitespace
\#\s*          # "#", then any number of whitespace
{comment_flag} #
([ \t]+\S+)?   # catch a group, with leading spaces and/or tabs, followed by any non-whitespace chars
\s*            # any number of whitespace
$              # end of line (since re.MULTILINE is passed)
""", re.IGNORECASE | re.MULTILINE | re.VERBOSE)
        # note: fn has to be single arg so we can use it in `pattern.sub` calls later
        patterns_and_replace_fns.append((pattern, partial(_replace_fn, magic_flag)))

    _add_pattern_and_replace_fn('default_exp', 'nbdev_default_export')
    _add_pattern_and_replace_fn('exports', 'nbdev_export_and_show')
    _add_pattern_and_replace_fn('exporti', 'nbdev_export_internal')
    _add_pattern_and_replace_fn('export', 'nbdev_export')
    _add_pattern_and_replace_fn('hide_input', 'nbdev_hide_input')
    _add_pattern_and_replace_fn('hide_output', 'nbdev_hide_output')
    _add_pattern_and_replace_fn('hide', 'nbdev_hide')
    _add_pattern_and_replace_fn('default_cls_lvl', 'nbdev_default_class_level')
    _add_pattern_and_replace_fn('collapse[_-]output', 'nbdev_collapse_output')
    _add_pattern_and_replace_fn('collapse[_-]show', 'nbdev_collapse_input open')
    _add_pattern_and_replace_fn('collapse[_-]hide', 'nbdev_collapse_input')
    _add_pattern_and_replace_fn('collapse', 'nbdev_collapse_input')
    for flag in Config().get('tst_flags', '').split('|'):
        _add_pattern_and_replace_fn(f'all_{flag}', f'nbdev_{flag}_test all')
        _add_pattern_and_replace_fn(flag, f'nbdev_{flag}_test')
    return patterns_and_replace_fns

# Internal Cell
class CellMigrator():
    """Can migrate a cell using `patterns_and_replace_fns`.
    Keeps track of the number of cells updated in `upd_count`"""
    def __init__(self, patterns_and_replace_fns):
        self.patterns_and_replace_fns,self.upd_count=patterns_and_replace_fns,0
    def __call__(self, cell):
        for pattern, replace_fn in self.patterns_and_replace_fns:
            source=cell.source
            cell.source=pattern.sub(replace_fn, source)
            if source!=cell.source: self.upd_count+=1

# Internal Cell
def _migrate2magic(nb, update_md=False):
    "Migrate a single notebook"
    code_cell_migrator=CellMigrator(_code_patterns_and_replace_fns())
    [code_cell_migrator(cell) for cell in nb.cells if cell.cell_type=='code']
    if code_cell_migrator.upd_count!=0:
        nb.cells.insert(0, nbformat.v4.new_code_cell('from nbdev import *'))
    NotebookNotary().sign(nb)
    return nb

# Cell
@call_parse
def nbdev_migrate2magic():
    """Update all notebooks in `nbs_path` to use magic flags."""
    config=Config()
    bck_path=config.config_file.parent/'.nbdev_bck_0'
    i=0
    while bck_path.exists():
        i+=1
        bck_path=config.config_file.parent/f'.nbdev_bck_{i}'
    bck_path.mkdir()
    for fname in config.nbs_path.glob('*.ipynb'):
        shutil.copy2(fname, bck_path)
    print('Copied nbs in', config.nbs_path, 'to', bck_path)
    for fname in config.nbs_path.glob('*.ipynb'):
        print('Migrating', fname)
        nbformat.write(_migrate2magic(read_nb(fname)), str(fname), version=4)