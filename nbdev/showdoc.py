"""Display symbol documentation in notebook and website"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api/08_showdoc.ipynb.

# %% ../nbs/api/08_showdoc.ipynb 2
from __future__ import annotations
from .doclinks import *
from .config import get_config

from fastcore.docments import *
from fastcore.utils import *

from importlib import import_module
import inspect, sys
from collections import OrderedDict
from textwrap import fill
from types import FunctionType

# %% auto 0
__all__ = ['BasicMarkdownRenderer', 'show_doc', 'BasicHtmlRenderer', 'doc', 'showdoc_nm', 'colab_link']

# %% ../nbs/api/08_showdoc.ipynb
def _ext_link(url, txt, xtra=""): return f'[{txt}]({url}){{target="_blank" {xtra}}}'

class BasicMarkdownRenderer(MarkdownRenderer):
    "Markdown renderer for `show_doc`"
    def _repr_markdown_(self):
        doc = '---\n\n'
        src = NbdevLookup().code(self.fn)
        if src: doc += _ext_link(src, 'source', 'style="float:right; font-size:smaller"') + '\n\n'
        h = '#'*self.title_level
        doc += f'{h} {self.nm}\n\n'
        return doc+super()._repr_markdown_()

# %% ../nbs/api/08_showdoc.ipynb
def show_doc(sym,  # Symbol to document
             renderer=None,  # Optional renderer (defaults to markdown)
             name:str|None=None,  # Optionally override displayed name of `sym`
             title_level:int=3):  # Heading level to use for symbol name
    "Show signature and docstring for `sym`"
    if renderer is None: renderer = get_config().get('renderer', None)
    if renderer is None: renderer=BasicMarkdownRenderer
    elif isinstance(renderer,str):
        p,m = renderer.rsplit('.', 1)
        renderer = getattr(import_module(p), m)
    if isinstance_str(sym, "Function"): pass
    elif isinstance_str(sym, "TypeDispatch"): pass  # use _str as TypeDispatch will be removed from fastcore
    else:return renderer(sym or show_doc, name=name, title_level=title_level)

# %% ../nbs/api/08_showdoc.ipynb
def _create_html_table(table_str):
    def split_row(row):
        return re.findall(r'\|(?:(?:\\.|[^|\\])*)', row)
    
    def unescape_cell(cell): 
        return cell.strip(' *|').replace(r'\|', '|')
    
    lines = table_str.strip().split('\n')
    header = [f"<th>{unescape_cell(cell)}</th>" for cell in split_row(lines[0])]
    rows = [[f"<td>{unescape_cell(cell)}</td>" for cell in split_row(line)] for line in lines[2:]]
    
    return f'''<table>
    <thead><tr>{' '.join(header)}</tr></thead>
    <tbody>{''.join(f'<tr>{" ".join(row)}</tr>' for row in rows)}</tbody>
    </table>'''

# %% ../nbs/api/08_showdoc.ipynb
def _html_link(url, txt): return f'<a href="{url}" target="_blank" rel="noreferrer noopener">{txt}</a>'

# %% ../nbs/api/08_showdoc.ipynb
from fastcore.docments import _fmt_sig

# %% ../nbs/api/08_showdoc.ipynb
class BasicHtmlRenderer(ShowDocRenderer):
    "HTML renderer for `show_doc`"
    def _repr_html_(self):
        doc = '<hr/>\n'
        src = NbdevLookup().code(self.fn)
        doc += f'<h{self.title_level}>{self.nm}</h{self.title_level}>\n'
        sig = _fmt_sig(self.sig) if self.sig else ''
        # Escape < and > characters in the signature
        sig = sig.replace('<', '&lt;').replace('>', '&gt;')
        doc += f'<blockquote><pre><code>{self.nm} {sig}</code></pre></blockquote>'
        if self.docs:
            doc += f"<p><i>{self.docs}</i></p>"
        if src: doc += f"<br/>{_html_link(src, 'source')}"
        if self.dm.has_docment: doc += _create_html_table(str(self.dm))
        return doc

    def doc(self):
        "Show `show_doc` info along with link to docs"
        from IPython.display import display,HTML
        res = self._repr_html_()
        display(HTML(res))

# %% ../nbs/api/08_showdoc.ipynb
def doc(elt):
    "Show `show_doc` info along with link to docs"
    BasicHtmlRenderer(elt).doc()

# %% ../nbs/api/08_showdoc.ipynb
def showdoc_nm(tree):
    "Get the fully qualified name for showdoc."
    return ifnone(patch_name(tree), tree.name)

# %% ../nbs/api/08_showdoc.ipynb
def colab_link(path):
    "Get a link to the notebook at `path` on Colab"
    from IPython.display import Markdown
    cfg = get_config()
    pre = 'https://colab.research.google.com/github/'
    res = f'{pre}{cfg.user}/{cfg.repo}/blob/{cfg.branch}/{cfg.nbs_path.name}/{path}.ipynb'
    display(Markdown(f'[Open `{path}` in Colab]({res})'))
