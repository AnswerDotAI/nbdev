# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/08_notebookutils.ipynb (unless otherwise specified).

__all__ = ['NbdevSaver', 'load_ipython_extension']

# Cell
import logging
import os
from IPython.core.magic import (Magics, magics_class)
from .imports import Config
from .export import notebook2script

# Cell
@magics_class
class NbdevSaver:
    last_update = None
    def pre_execute(self):
        logging.debug("Saving nbdev scripts")
        if self.last_update is None:
            logging.debug("First run, refreshing cache")
            self.last_update = self.get_file_timestamps()
            for file in self.last_update.keys():
                self.update_file(fname=str(file))
        else:
            previous_changes = self.last_update
            self.last_update = self.get_file_timestamps()
            for file in self.last_update:
                if file in previous_changes and previous_changes[file] == self.last_update[file]:
                    logging.debug("Skipping %s", file)
                else:
                    logging.debug("Updating %s", file)
                    self.update_file(fname=str(file))

    def update_file(self, fname):
        try:
            notebook2script(fname=fname, silent=True)
        except Exception as e:
            logging.exception("Failed to export nbdev notebook %s", str(fname))

    def get_file_timestamps(self):
        return dict([(f, os.stat(f).st_mtime) for f in Config().nbs_path.glob('*.ipynb') if not f.name.startswith('_')])

def load_ipython_extension(ip):
    """Load the extension in IPython."""
    nbdev_saver = NbdevSaver()
    ip.register_magics(nbdev_saver)
    ip.events.register('pre_execute', nbdev_saver.pre_execute)